מטלת‎ ‎מנחה‎ (‎ממ"ן‎) ‎‏16‏
סביבת‎ ‎עבודה
*	פרויקט‎ ‎זה‎ ‎נבנה‎ ‎בשפת‎ C.‎קומפל‎ ‎בתקן‎ ANSI gcc ‎על‎ ‎גבי‎ ‎מערכת‎ Windows ‎וכן‎ ‎קובץ‎ ‎ההרצה‎ ‎הינו‎ .exe ‎ניתן‎ ‎לפנות‎ ‎אליו‎ ‎כמובן‎ ‎דרך‎ ‎הcmd ‎
הסבר‎ ‎על‎ ‎מבני‎ ‎הנתונים
*	מבני‎ ‎הנתונים‎ ‎בפרויקט‎ ‎זה‎,‎הינו‎ ‎הרחבה‎ ‎של‎ ‎המבנה‎ ‎נתונים‎: ‎עץ‎-‎אדום‎-‎שחור‎.‎
הסיבה‎ ‎לכך‎ ‎היא‎ ‎כי‎ ‎עץ‎-‎אדום‎-‎שחור‎ ‎מבטיח‎ ‎עלות‎ ‎זמן‎ O(log??n)? ‎כמעט‎ ‎בכל‎ ‎פעולתיו‎.‎
*	למבני‎ ‎הנתונים‎ ‎נקרא‎: RBTree ‎וכן‎ ‎הוא‎ ‎מכיל‎ ‎את‎ ‎הערכים‎ ‎הבאים‎:‎
‏1.‏	מצביע‎ ‎לצומת‎: root ‎ראש‎ ‎העץ‎.‎
‏2.‏	מצביע‎ ‎לצומת‎: mid ‎שהינו‎ ‎החציון‎ ‎בכל‎ ‎רגע‎ ‎נתון‎.‎
‏3.‏	מספר‎: ‎מכיל‎ ‎את‎ ‎מספר‎ ‎האיברים‎ ‎בעץ‎ ‎בכל‎ ‎רגע‎ ‎נתון‎.‎
*	פעולות‎: ‎כל‎ ‎הפעולות‎ ‎שאותם‎ ‎מבצע‎ ‎על‎ ‎העץ
*	פעולות‎ ‎סיום‎: ‎משחררת‎ ‎את‎ ‎כל‎ ‎הזיכרון‎ ‎הדינאמי‎ ‎שהוקצה‎ (‎פעולה‎ ‎זו‎ ‎חייבת‎ ‎להיות‎ ‎מופעלת‎ ‎בסוף‎ ‎הרצת‎ ‎התכנית‎)‎
*	לכל‎ ‎צומת‎ ‎במבני‎ ‎נתונים‎ ‎זה‎,‎נקרא‎: RBNode ‎וכן‎,‎הוא‎ ‎מכיל‎ ‎את‎ ‎הערכים‎ ‎הבאים‎: ‎
‏1.‏	מספר‎: key ‎מכיל‎ ‎את‎ ‎ערך‎ ‎הצומת
‏2.‏	מצביע‎ ‎לצומת‎: parent ‎שהינו‎ ‎האב‎ ‎של‎ ‎הצומת‎ ‎הנוכחית
‏3.‏	מצביע‎ ‎לצומת‎: left ‎שהינו‎ ‎הבן‎ ‎השמאלי‎ ‎של‎ ‎הצומת‎ ‎הנוכחית
‏4.‏	מצביע‎ ‎לצומת‎: right ‎שהינו‎ ‎הבן‎ ‎הימני‎ ‎של‎ ‎הצומת‎ ‎הנוכחית
‏5.‏	מספר‎ ‎קצר‎: color ‎מכיל‎ ‎‏1‏‎ ‎אם‎ ‎זה‎ ‎אדום‎ ‎ו‎ ‎‏2‏‎ ‎אם‎ ‎שחור
מבנה‎ ‎הפרויקט
*	שלושת‎ ‎הפעולות‎ ‎הראשיות‎: ‎
‏1.‏	MMN16 - ‎הפעולה‎ ‎הראשית‎ ‎שמקבלת‎ ‎מצביע‎ ‎למערך‎,‎‏3‏‎ ‎נקודות‎ ‎בדיקה‎ ‎ואת‎ ‎אורך‎ ‎המערך‎,‎וכן‎ ‎בונה‎ ‎את‎ ‎המבנה‎ ‎נתונים‎ ‎ומציגה‎ ‎את‎ ‎החציונים‎ ‎בנקודות‎ ‎הבדיקה‎ ‎בהתאם‎.‎
‏2.‏	insert - ‎הפעולה‎ ‎שמקבלת‎ ‎ערך‎ ‎ומכניסה‎ ‎למבנה‎ ‎נתונים
‏3.‏	printMedian - ‎הפעולה‎ ‎שמדפיסה‎ ‎למסך‎ ‎את‎ ‎החציון‎ ‎ברגע‎ ‎נתון
נמצאות‎ ‎בקובץ‎ utils.c (‎ומוצהרות‎ ‎בקובץ‎ utils.h)‎
*	שלושת‎ ‎הדוגמאות‎,‎שמכילות‎ ‎ערכים‎ ‎בגודל‎ ‎‏200‏‎,‎‏400‏‎,‎‏800‏‎ ‎ערכים‎ ‎בהתאמה‎ ‎ומפעילות‎ ‎אותם‎ ‎על‎ ‎האלגוריתם‎ ‎נמצאות‎ ‎בקובץ‎ main.c
*	מימוש‎ ‎כל‎ ‎המבנה‎ ‎נתונים‎,‎נמצא‎ ‎בקובץ‎ RBTree.c (‎וכן‎ ‎פעולות‎ ‎מוצהרות‎ ‎בקובץ‎ RBTree.h)‎

רעיון‎ ‎האלגוריתם
*	הוספת‎ ‎איבר‎ ‎חדש
הנחת‎ ‎האלגוריתם‎,‎בשלב‎ n
‎>0 ‎העץ‎ ‎מוגדר‎ ‎ומכיל‎ ‎מספרים‎,‎וכן‎ ‎המצביע‎ mid ‎מצביע‎ ‎אל‎ ‎החציון‎ ‎של‎ ‎כה‎ ‎הערכים‎ ‎שהוקלדו‎ ‎עד‎ ‎כה‎.‎
בעת‎ ‎הכנסת‎ ‎איבר‎ ‎חדש‎,‎נכניס‎ ‎אותו‎ ‎לעץ‎ ‎באמצעות‎ ‎אלגוריתם‎ ‎הכנסה‎ ‎של‎ ‎עץ‎ ‎אדום‎ ‎שחור‎ (‎אלגוריתם‎ ‎זה‎ ‎מופיע‎ ‎בפירוט‎ ‎בספר‎ ‎בעמוד‎ ‎‏236‏‎ ‎כפועל‎ ‎בעלות‎ ‎זמן‎ ‎לוגריתמית‎)‎
לאחר‎ ‎מכן‎,‎ניקח‎ ‎את‎ ‎האיבר‎ ‎שהכנסנו‎ ‎זה‎ ‎עתה‎,‎שהוא‎ ‎עכשיו‎ ‎ממש‎ ‎צומת‎ ‎בעץ‎-‎אדום‎-‎שחור‎ ‎ובאמצעותו‎,‎באמצעות‎ ‎המצביע‎ ‎לערך‎ mid ‎הקודם‎,‎ובעמצאות‎ ‎מספר‎ ‎הערכים‎ ‎בעץ‎: n ‎נחשב‎ ‎בנקל‎ ‎האם‎ ‎צריך‎ ‎ל'הזיז'‏‎ ‎את‎ ‎המצביע‎ ‎אל‎ ‎האיבר‎ ‎העוקב‎ ‎או‎ ‎הקודם‎ ‎שלו‎ ‎בעץ‎.‎החישוב‎ ‎כמובן‎ ‎יקח‎ O(1) ‎ושליפת‎ ‎האיבר‎ ‎העוקב
‎/‎הקודם‎ ‎לmid ‎תעשה‎ ‎באמצעות‎ ‎האלגוריתמים‎ successor ‎או‎ predecessor (‎כל‎ ‎פעם‎ ‎אחד‎ ‎מהם‎ ‎בהתאם‎ ‎לצורך‎) ‎המופיעים‎ ‎בספר‎ ‎בעמוד‎ ‎‏218‏‎ ‎ומוכחים‎ ‎שם‎ ‎כפועלים‎ ‎בעלות‎ ‎זמן‎ ‎לוגריתמית‎.‎
במצב‎ ‎שהמערך‎ ‎זוגי‎,‎ניבחר‎ ‎את‎ ‎האיבר‎ ‎במיקום‎ ?n/2? ‎כאשר‎ ‎המערך‎ ‎ממוין‎.‎
כלומר‎,‎סך‎ ‎עלות‎ ‎הזמן‎ ‎של‎ ‎הוספת‎ ‎איבר‎ ‎למבנה‎ ‎הנתונים‎ ‎הינו‎: O(log??n)?‎
*	שליפת‎ ‎החציון
כפי‎ ‎שהנחנו‎ ‎בשלב‎ n ‎והוכחנו‎ ‎בשלב‎ n
‎+1,‎המצביע‎ ‎לחציון‎ ‎מכיל‎ ‎בכל‎ ‎רגע‎ ‎נתון‎ ‎את‎ ‎חציון‎ ‎כל‎ ‎האיברים‎ ‎שהוקשו‎ ‎עד‎ ‎כה‎.‎ולכן‎ ‎פשוט‎ ‎נקרא‎ ‎לחציון‎ ‎זה‎ ‎ונדפיס‎ ‎בהתאם‎ ‎על‎ ‎המסך‎ ‎בעלות‎ ‎זמן‎ O(1)‎

בס"ד
